‚óè When and why do we need lazy()?
‚úÖ When:
Use React.lazy() when you want to load a component only when it's needed, rather than including it in the initial bundle.

‚úÖ Why:
To improve performance and reduce the initial load time of your app by splitting your code into smaller chunks.
This is especially useful for:
Routes (e.g., About, Contact, etc.)
Feature modules
Components not immediately visible (modals, tabs, etc.)

Example:
const About = React.lazy(() => import('./About'));
--------------------------------------------------------------------------------------
‚óè What is Suspense?
Suspense is a component provided by React to handle loading states when components (or data) are being lazily loaded or fetched asynchronously.

‚úÖ What it does:
It shows a fallback UI (like a spinner or message) while waiting for the lazy-loaded component or data to be ready.
Example:
<Suspense fallback={<div>Loading...</div>}>
  <About />
</Suspense>
-----------------------------------------------------------------------------
‚óè Why we got this error:
A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator.
 To fix, updates that suspend should be wrapped with startTransition.

üß† Meaning:
You're trying to synchronously render a lazy or async component right after a user action (like typing or clicking), and React can't complete it instantly ‚Äî it suspends. React is warning that replacing UI instantly with a loader while the user is interacting could feel jarring.

‚úÖ Fix with startTransition:
Wrap the update that causes suspension in startTransition, so React treats it as non-urgent and doesn't block the urgent work (like text input or clicks).

Example:
import { startTransition } from 'react';

startTransition(() => {
  setShowComponent(true); // This triggers lazy loading
});
------------------------------------------------------------
‚óè How does Suspense fix this error?
Suspense lets React wait for the component to load and gracefully fallback to a loader.
 But when you combine this with startTransition, React knows it can delay non-urgent UI updates,
 keeping the user experience smooth and uninterrupted.
Without startTransition, the whole UI may flash or freeze, especially during fast input or click.
---------------------------------------------------------------------------------------------
‚óè Advantages of this code-splitting pattern (lazy + Suspense):
‚úÖ Pros:
Faster initial load time
Download only what‚Äôs needed (on demand)
Cleaner separation of features/modules
Better user experience with graceful loading

‚ùå Cons:
Slight delay in rendering some components
Needs careful error handling (consider adding <ErrorBoundary>)
Can be tricky during user interaction if not handled with startTransition
Server-side rendering with Suspense is still evolving (React 18+ supports it better)
-----------------------------------------------------------------------------------------------------------
‚óè When do we and why do we need Suspense?
‚úÖ When:
When using React.lazy() for component code-splitting
When using libraries like React Query or Relay that support data fetching with suspense
When you want to defer rendering until some async operation (like fetch) is complete

‚úÖ Why:
To provide a better UX by showing a fallback while content is being prepared
To control the app's behavior during asynchronous operations
To avoid loading entire app code upfront
--------------------------------------------------------------------------------------------

